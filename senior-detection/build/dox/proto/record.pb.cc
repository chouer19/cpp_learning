// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dox/proto/record.proto

#include "dox/proto/record.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace senior {
namespace dox {
namespace proto {
constexpr SingleIndex::SingleIndex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(uint64_t{0u})
  , type_(0)

  , _oneof_case_{}{}
struct SingleIndexDefaultTypeInternal {
  constexpr SingleIndexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleIndexDefaultTypeInternal() {}
  union {
    SingleIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleIndexDefaultTypeInternal _SingleIndex_default_instance_;
constexpr ChunkHeaderCache::ChunkHeaderCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_number_(uint64_t{0u})
  , begin_time_(uint64_t{0u})
  , end_time_(uint64_t{0u})
  , raw_size_(uint64_t{0u}){}
struct ChunkHeaderCacheDefaultTypeInternal {
  constexpr ChunkHeaderCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkHeaderCacheDefaultTypeInternal() {}
  union {
    ChunkHeaderCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkHeaderCacheDefaultTypeInternal _ChunkHeaderCache_default_instance_;
constexpr ChunkBodyCache::ChunkBodyCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_number_(uint64_t{0u}){}
struct ChunkBodyCacheDefaultTypeInternal {
  constexpr ChunkBodyCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkBodyCacheDefaultTypeInternal() {}
  union {
    ChunkBodyCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkBodyCacheDefaultTypeInternal _ChunkBodyCache_default_instance_;
constexpr ChannelCache::ChannelCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proto_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_number_(uint64_t{0u}){}
struct ChannelCacheDefaultTypeInternal {
  constexpr ChannelCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelCacheDefaultTypeInternal() {}
  union {
    ChannelCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelCacheDefaultTypeInternal _ChannelCache_default_instance_;
constexpr SingleMessage::SingleMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_(uint64_t{0u}){}
struct SingleMessageDefaultTypeInternal {
  constexpr SingleMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleMessageDefaultTypeInternal() {}
  union {
    SingleMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleMessageDefaultTypeInternal _SingleMessage_default_instance_;
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : major_version_(0u)
  , minor_version_(0u)
  , chunk_interval_(uint64_t{0u})
  , segment_interval_(uint64_t{0u})
  , index_position_(uint64_t{0u})
  , chunk_number_(uint64_t{0u})
  , channel_number_(uint64_t{0u})
  , compress_(0)

  , is_complete_(false)
  , begin_time_(uint64_t{0u})
  , end_time_(uint64_t{0u})
  , message_number_(uint64_t{0u})
  , size_(uint64_t{0u})
  , chunk_raw_size_(uint64_t{0u})
  , segment_raw_size_(uint64_t{0u}){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr Channel::Channel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proto_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChannelDefaultTypeInternal {
  constexpr ChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelDefaultTypeInternal() {}
  union {
    Channel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelDefaultTypeInternal _Channel_default_instance_;
constexpr ChunkHeader::ChunkHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : begin_time_(uint64_t{0u})
  , end_time_(uint64_t{0u})
  , message_number_(uint64_t{0u})
  , raw_size_(uint64_t{0u}){}
struct ChunkHeaderDefaultTypeInternal {
  constexpr ChunkHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkHeaderDefaultTypeInternal() {}
  union {
    ChunkHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkHeaderDefaultTypeInternal _ChunkHeader_default_instance_;
constexpr ChunkBody::ChunkBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct ChunkBodyDefaultTypeInternal {
  constexpr ChunkBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkBodyDefaultTypeInternal() {}
  union {
    ChunkBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkBodyDefaultTypeInternal _ChunkBody_default_instance_;
constexpr Index::Index(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : indexes_(){}
struct IndexDefaultTypeInternal {
  constexpr IndexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexDefaultTypeInternal() {}
  union {
    Index _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexDefaultTypeInternal _Index_default_instance_;
}  // namespace proto
}  // namespace dox
}  // namespace senior
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dox_2fproto_2frecord_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dox_2fproto_2frecord_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dox_2fproto_2frecord_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dox_2fproto_2frecord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleIndex, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleIndex, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleIndex, type_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleIndex, position_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleIndex, cache_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeaderCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeaderCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeaderCache, message_number_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeaderCache, begin_time_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeaderCache, end_time_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeaderCache, raw_size_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkBodyCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkBodyCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkBodyCache, message_number_),
  0,
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChannelCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChannelCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChannelCache, message_number_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChannelCache, name_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChannelCache, message_type_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChannelCache, proto_desc_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleMessage, channel_name_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleMessage, time_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::SingleMessage, content_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, major_version_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, minor_version_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, compress_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, chunk_interval_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, segment_interval_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, index_position_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, chunk_number_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, channel_number_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, begin_time_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, end_time_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, message_number_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, size_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, is_complete_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, chunk_raw_size_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Header, segment_raw_size_),
  0,
  1,
  7,
  2,
  3,
  4,
  5,
  6,
  9,
  10,
  11,
  12,
  8,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Channel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Channel, name_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Channel, message_type_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Channel, proto_desc_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeader, begin_time_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeader, end_time_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeader, message_number_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkHeader, raw_size_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::ChunkBody, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Index, indexes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::senior::dox::proto::SingleIndex)},
  { 16, 25, sizeof(::senior::dox::proto::ChunkHeaderCache)},
  { 29, 35, sizeof(::senior::dox::proto::ChunkBodyCache)},
  { 36, 45, sizeof(::senior::dox::proto::ChannelCache)},
  { 49, 57, sizeof(::senior::dox::proto::SingleMessage)},
  { 60, 80, sizeof(::senior::dox::proto::Header)},
  { 95, 103, sizeof(::senior::dox::proto::Channel)},
  { 106, 115, sizeof(::senior::dox::proto::ChunkHeader)},
  { 119, -1, sizeof(::senior::dox::proto::ChunkBody)},
  { 125, -1, sizeof(::senior::dox::proto::Index)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_SingleIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_ChunkHeaderCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_ChunkBodyCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_ChannelCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_SingleMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_ChunkHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_ChunkBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_Index_default_instance_),
};

const char descriptor_table_protodef_dox_2fproto_2frecord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026dox/proto/record.proto\022\020senior.dox.pro"
  "to\"\216\002\n\013SingleIndex\022+\n\004type\030\001 \001(\0162\035.senio"
  "r.dox.proto.SectionType\022\020\n\010position\030\002 \001("
  "\004\0227\n\rchannel_cache\030e \001(\0132\036.senior.dox.pr"
  "oto.ChannelCacheH\000\022@\n\022chunk_header_cache"
  "\030f \001(\0132\".senior.dox.proto.ChunkHeaderCac"
  "heH\000\022<\n\020chunk_body_cache\030g \001(\0132 .senior."
  "dox.proto.ChunkBodyCacheH\000B\007\n\005cache\"b\n\020C"
  "hunkHeaderCache\022\026\n\016message_number\030\001 \001(\004\022"
  "\022\n\nbegin_time\030\002 \001(\004\022\020\n\010end_time\030\003 \001(\004\022\020\n"
  "\010raw_size\030\004 \001(\004\"(\n\016ChunkBodyCache\022\026\n\016mes"
  "sage_number\030\001 \001(\004\"^\n\014ChannelCache\022\026\n\016mes"
  "sage_number\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\024\n\014messa"
  "ge_type\030\003 \001(\t\022\022\n\nproto_desc\030\004 \001(\014\"D\n\rSin"
  "gleMessage\022\024\n\014channel_name\030\001 \001(\t\022\014\n\004time"
  "\030\002 \001(\004\022\017\n\007content\030\003 \001(\014\"\217\003\n\006Header\022\025\n\rma"
  "jor_version\030\001 \001(\r\022\025\n\rminor_version\030\002 \001(\r"
  "\0220\n\010compress\030\003 \001(\0162\036.senior.dox.proto.Co"
  "mpressType\022\026\n\016chunk_interval\030\004 \001(\004\022\030\n\020se"
  "gment_interval\030\005 \001(\004\022\031\n\016index_position\030\006"
  " \001(\004:\0010\022\027\n\014chunk_number\030\007 \001(\004:\0010\022\031\n\016chan"
  "nel_number\030\010 \001(\004:\0010\022\025\n\nbegin_time\030\t \001(\004:"
  "\0010\022\023\n\010end_time\030\n \001(\004:\0010\022\031\n\016message_numbe"
  "r\030\013 \001(\004:\0010\022\017\n\004size\030\014 \001(\004:\0010\022\032\n\013is_comple"
  "te\030\r \001(\010:\005false\022\026\n\016chunk_raw_size\030\016 \001(\004\022"
  "\030\n\020segment_raw_size\030\017 \001(\004\"A\n\007Channel\022\014\n\004"
  "name\030\001 \001(\t\022\024\n\014message_type\030\002 \001(\t\022\022\n\nprot"
  "o_desc\030\003 \001(\014\"]\n\013ChunkHeader\022\022\n\nbegin_tim"
  "e\030\001 \001(\004\022\020\n\010end_time\030\002 \001(\004\022\026\n\016message_num"
  "ber\030\003 \001(\004\022\020\n\010raw_size\030\004 \001(\004\">\n\tChunkBody"
  "\0221\n\010messages\030\001 \003(\0132\037.senior.dox.proto.Si"
  "ngleMessage\"7\n\005Index\022.\n\007indexes\030\001 \003(\0132\035."
  "senior.dox.proto.SingleIndex*{\n\013SectionT"
  "ype\022\022\n\016SECTION_HEADER\020\000\022\030\n\024SECTION_CHUNK"
  "_HEADER\020\001\022\026\n\022SECTION_CHUNK_BODY\020\002\022\021\n\rSEC"
  "TION_INDEX\020\003\022\023\n\017SECTION_CHANNEL\020\004*E\n\014Com"
  "pressType\022\021\n\rCOMPRESS_NONE\020\000\022\020\n\014COMPRESS"
  "_BZ2\020\001\022\020\n\014COMPRESS_LZ4\020\002"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dox_2fproto_2frecord_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dox_2fproto_2frecord_2eproto = {
  false, false, 1504, descriptor_table_protodef_dox_2fproto_2frecord_2eproto, "dox/proto/record.proto", 
  &descriptor_table_dox_2fproto_2frecord_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_dox_2fproto_2frecord_2eproto::offsets,
  file_level_metadata_dox_2fproto_2frecord_2eproto, file_level_enum_descriptors_dox_2fproto_2frecord_2eproto, file_level_service_descriptors_dox_2fproto_2frecord_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dox_2fproto_2frecord_2eproto_getter() {
  return &descriptor_table_dox_2fproto_2frecord_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dox_2fproto_2frecord_2eproto(&descriptor_table_dox_2fproto_2frecord_2eproto);
namespace senior {
namespace dox {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dox_2fproto_2frecord_2eproto);
  return file_level_enum_descriptors_dox_2fproto_2frecord_2eproto[0];
}
bool SectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dox_2fproto_2frecord_2eproto);
  return file_level_enum_descriptors_dox_2fproto_2frecord_2eproto[1];
}
bool CompressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SingleIndex::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleIndex>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::senior::dox::proto::ChannelCache& channel_cache(const SingleIndex* msg);
  static const ::senior::dox::proto::ChunkHeaderCache& chunk_header_cache(const SingleIndex* msg);
  static const ::senior::dox::proto::ChunkBodyCache& chunk_body_cache(const SingleIndex* msg);
};

const ::senior::dox::proto::ChannelCache&
SingleIndex::_Internal::channel_cache(const SingleIndex* msg) {
  return *msg->cache_.channel_cache_;
}
const ::senior::dox::proto::ChunkHeaderCache&
SingleIndex::_Internal::chunk_header_cache(const SingleIndex* msg) {
  return *msg->cache_.chunk_header_cache_;
}
const ::senior::dox::proto::ChunkBodyCache&
SingleIndex::_Internal::chunk_body_cache(const SingleIndex* msg) {
  return *msg->cache_.chunk_body_cache_;
}
void SingleIndex::set_allocated_channel_cache(::senior::dox::proto::ChannelCache* channel_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cache();
  if (channel_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::senior::dox::proto::ChannelCache>::GetOwningArena(channel_cache);
    if (message_arena != submessage_arena) {
      channel_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_cache, submessage_arena);
    }
    set_has_channel_cache();
    cache_.channel_cache_ = channel_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.SingleIndex.channel_cache)
}
void SingleIndex::set_allocated_chunk_header_cache(::senior::dox::proto::ChunkHeaderCache* chunk_header_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cache();
  if (chunk_header_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::senior::dox::proto::ChunkHeaderCache>::GetOwningArena(chunk_header_cache);
    if (message_arena != submessage_arena) {
      chunk_header_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk_header_cache, submessage_arena);
    }
    set_has_chunk_header_cache();
    cache_.chunk_header_cache_ = chunk_header_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.SingleIndex.chunk_header_cache)
}
void SingleIndex::set_allocated_chunk_body_cache(::senior::dox::proto::ChunkBodyCache* chunk_body_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cache();
  if (chunk_body_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::senior::dox::proto::ChunkBodyCache>::GetOwningArena(chunk_body_cache);
    if (message_arena != submessage_arena) {
      chunk_body_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk_body_cache, submessage_arena);
    }
    set_has_chunk_body_cache();
    cache_.chunk_body_cache_ = chunk_body_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.SingleIndex.chunk_body_cache)
}
SingleIndex::SingleIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.SingleIndex)
}
SingleIndex::SingleIndex(const SingleIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&position_)) + sizeof(type_));
  clear_has_cache();
  switch (from.cache_case()) {
    case kChannelCache: {
      _internal_mutable_channel_cache()->::senior::dox::proto::ChannelCache::MergeFrom(from._internal_channel_cache());
      break;
    }
    case kChunkHeaderCache: {
      _internal_mutable_chunk_header_cache()->::senior::dox::proto::ChunkHeaderCache::MergeFrom(from._internal_chunk_header_cache());
      break;
    }
    case kChunkBodyCache: {
      _internal_mutable_chunk_body_cache()->::senior::dox::proto::ChunkBodyCache::MergeFrom(from._internal_chunk_body_cache());
      break;
    }
    case CACHE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.SingleIndex)
}

inline void SingleIndex::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&position_)) + sizeof(type_));
clear_has_cache();
}

SingleIndex::~SingleIndex() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.SingleIndex)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_cache()) {
    clear_cache();
  }
}

void SingleIndex::ArenaDtor(void* object) {
  SingleIndex* _this = reinterpret_cast< SingleIndex* >(object);
  (void)_this;
}
void SingleIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleIndex::clear_cache() {
// @@protoc_insertion_point(one_of_clear_start:senior.dox.proto.SingleIndex)
  switch (cache_case()) {
    case kChannelCache: {
      if (GetArenaForAllocation() == nullptr) {
        delete cache_.channel_cache_;
      }
      break;
    }
    case kChunkHeaderCache: {
      if (GetArenaForAllocation() == nullptr) {
        delete cache_.chunk_header_cache_;
      }
      break;
    }
    case kChunkBodyCache: {
      if (GetArenaForAllocation() == nullptr) {
        delete cache_.chunk_body_cache_;
      }
      break;
    }
    case CACHE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CACHE_NOT_SET;
}


void SingleIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.SingleIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&position_)) + sizeof(type_));
  }
  clear_cache();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .senior.dox.proto.SectionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::senior::dox::proto::SectionType_IsValid(val))) {
            _internal_set_type(static_cast<::senior::dox::proto::SectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .senior.dox.proto.ChannelCache channel_cache = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .senior.dox.proto.ChunkHeaderCache chunk_header_cache = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk_header_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .senior.dox.proto.ChunkBodyCache chunk_body_cache = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk_body_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.SingleIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .senior.dox.proto.SectionType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint64 position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_position(), target);
  }

  switch (cache_case()) {
    case kChannelCache: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          101, _Internal::channel_cache(this), target, stream);
      break;
    }
    case kChunkHeaderCache: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          102, _Internal::chunk_header_cache(this), target, stream);
      break;
    }
    case kChunkBodyCache: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          103, _Internal::chunk_body_cache(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.SingleIndex)
  return target;
}

size_t SingleIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.SingleIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_position());
    }

    // optional .senior.dox.proto.SectionType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  switch (cache_case()) {
    // .senior.dox.proto.ChannelCache channel_cache = 101;
    case kChannelCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cache_.channel_cache_);
      break;
    }
    // .senior.dox.proto.ChunkHeaderCache chunk_header_cache = 102;
    case kChunkHeaderCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cache_.chunk_header_cache_);
      break;
    }
    // .senior.dox.proto.ChunkBodyCache chunk_body_cache = 103;
    case kChunkBodyCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cache_.chunk_body_cache_);
      break;
    }
    case CACHE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleIndex::GetClassData() const { return &_class_data_; }

void SingleIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SingleIndex *>(to)->MergeFrom(
      static_cast<const SingleIndex &>(from));
}


void SingleIndex::MergeFrom(const SingleIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.SingleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.cache_case()) {
    case kChannelCache: {
      _internal_mutable_channel_cache()->::senior::dox::proto::ChannelCache::MergeFrom(from._internal_channel_cache());
      break;
    }
    case kChunkHeaderCache: {
      _internal_mutable_chunk_header_cache()->::senior::dox::proto::ChunkHeaderCache::MergeFrom(from._internal_chunk_header_cache());
      break;
    }
    case kChunkBodyCache: {
      _internal_mutable_chunk_body_cache()->::senior::dox::proto::ChunkBodyCache::MergeFrom(from._internal_chunk_body_cache());
      break;
    }
    case CACHE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleIndex::CopyFrom(const SingleIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.SingleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleIndex::IsInitialized() const {
  return true;
}

void SingleIndex::InternalSwap(SingleIndex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleIndex, type_)
      + sizeof(SingleIndex::type_)
      - PROTOBUF_FIELD_OFFSET(SingleIndex, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
  swap(cache_, other->cache_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleIndex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2frecord_2eproto_getter, &descriptor_table_dox_2fproto_2frecord_2eproto_once,
      file_level_metadata_dox_2fproto_2frecord_2eproto[0]);
}

// ===================================================================

class ChunkHeaderCache::_Internal {
 public:
  using HasBits = decltype(std::declval<ChunkHeaderCache>()._has_bits_);
  static void set_has_message_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_begin_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_raw_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChunkHeaderCache::ChunkHeaderCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.ChunkHeaderCache)
}
ChunkHeaderCache::ChunkHeaderCache(const ChunkHeaderCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&message_number_, &from.message_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_size_) -
    reinterpret_cast<char*>(&message_number_)) + sizeof(raw_size_));
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.ChunkHeaderCache)
}

inline void ChunkHeaderCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&raw_size_) -
    reinterpret_cast<char*>(&message_number_)) + sizeof(raw_size_));
}

ChunkHeaderCache::~ChunkHeaderCache() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.ChunkHeaderCache)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChunkHeaderCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChunkHeaderCache::ArenaDtor(void* object) {
  ChunkHeaderCache* _this = reinterpret_cast< ChunkHeaderCache* >(object);
  (void)_this;
}
void ChunkHeaderCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkHeaderCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChunkHeaderCache::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.ChunkHeaderCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&message_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_size_) -
        reinterpret_cast<char*>(&message_number_)) + sizeof(raw_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkHeaderCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 message_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_number(&has_bits);
          message_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 begin_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_begin_time(&has_bits);
          begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 raw_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_raw_size(&has_bits);
          raw_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkHeaderCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.ChunkHeaderCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 message_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_message_number(), target);
  }

  // optional uint64 begin_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_begin_time(), target);
  }

  // optional uint64 end_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_end_time(), target);
  }

  // optional uint64 raw_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_raw_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.ChunkHeaderCache)
  return target;
}

size_t ChunkHeaderCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.ChunkHeaderCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 message_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_message_number());
    }

    // optional uint64 begin_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_begin_time());
    }

    // optional uint64 end_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_end_time());
    }

    // optional uint64 raw_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_raw_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunkHeaderCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChunkHeaderCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunkHeaderCache::GetClassData() const { return &_class_data_; }

void ChunkHeaderCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChunkHeaderCache *>(to)->MergeFrom(
      static_cast<const ChunkHeaderCache &>(from));
}


void ChunkHeaderCache::MergeFrom(const ChunkHeaderCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.ChunkHeaderCache)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      message_number_ = from.message_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_size_ = from.raw_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkHeaderCache::CopyFrom(const ChunkHeaderCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.ChunkHeaderCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkHeaderCache::IsInitialized() const {
  return true;
}

void ChunkHeaderCache::InternalSwap(ChunkHeaderCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkHeaderCache, raw_size_)
      + sizeof(ChunkHeaderCache::raw_size_)
      - PROTOBUF_FIELD_OFFSET(ChunkHeaderCache, message_number_)>(
          reinterpret_cast<char*>(&message_number_),
          reinterpret_cast<char*>(&other->message_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkHeaderCache::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2frecord_2eproto_getter, &descriptor_table_dox_2fproto_2frecord_2eproto_once,
      file_level_metadata_dox_2fproto_2frecord_2eproto[1]);
}

// ===================================================================

class ChunkBodyCache::_Internal {
 public:
  using HasBits = decltype(std::declval<ChunkBodyCache>()._has_bits_);
  static void set_has_message_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChunkBodyCache::ChunkBodyCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.ChunkBodyCache)
}
ChunkBodyCache::ChunkBodyCache(const ChunkBodyCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_number_ = from.message_number_;
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.ChunkBodyCache)
}

inline void ChunkBodyCache::SharedCtor() {
message_number_ = uint64_t{0u};
}

ChunkBodyCache::~ChunkBodyCache() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.ChunkBodyCache)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChunkBodyCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChunkBodyCache::ArenaDtor(void* object) {
  ChunkBodyCache* _this = reinterpret_cast< ChunkBodyCache* >(object);
  (void)_this;
}
void ChunkBodyCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkBodyCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChunkBodyCache::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.ChunkBodyCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_number_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkBodyCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 message_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_number(&has_bits);
          message_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkBodyCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.ChunkBodyCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 message_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_message_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.ChunkBodyCache)
  return target;
}

size_t ChunkBodyCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.ChunkBodyCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 message_number = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_message_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunkBodyCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChunkBodyCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunkBodyCache::GetClassData() const { return &_class_data_; }

void ChunkBodyCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChunkBodyCache *>(to)->MergeFrom(
      static_cast<const ChunkBodyCache &>(from));
}


void ChunkBodyCache::MergeFrom(const ChunkBodyCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.ChunkBodyCache)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message_number()) {
    _internal_set_message_number(from._internal_message_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkBodyCache::CopyFrom(const ChunkBodyCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.ChunkBodyCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkBodyCache::IsInitialized() const {
  return true;
}

void ChunkBodyCache::InternalSwap(ChunkBodyCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_number_, other->message_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkBodyCache::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2frecord_2eproto_getter, &descriptor_table_dox_2fproto_2frecord_2eproto_once,
      file_level_metadata_dox_2fproto_2frecord_2eproto[2]);
}

// ===================================================================

class ChannelCache::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelCache>()._has_bits_);
  static void set_has_message_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proto_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChannelCache::ChannelCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.ChannelCache)
}
ChannelCache::ChannelCache(const ChannelCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_type()) {
    message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_type(), 
      GetArenaForAllocation());
  }
  proto_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proto_desc()) {
    proto_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_desc(), 
      GetArenaForAllocation());
  }
  message_number_ = from.message_number_;
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.ChannelCache)
}

inline void ChannelCache::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
proto_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_number_ = uint64_t{0u};
}

ChannelCache::~ChannelCache() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.ChannelCache)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelCache::ArenaDtor(void* object) {
  ChannelCache* _this = reinterpret_cast< ChannelCache* >(object);
  (void)_this;
}
void ChannelCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelCache::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.ChannelCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      proto_desc_.ClearNonDefaultToEmpty();
    }
  }
  message_number_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 message_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_number(&has_bits);
          message_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.ChannelCache.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.ChannelCache.message_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes proto_desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_proto_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.ChannelCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 message_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_message_number(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.ChannelCache.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string message_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.ChannelCache.message_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_type(), target);
  }

  // optional bytes proto_desc = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_proto_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.ChannelCache)
  return target;
}

size_t ChannelCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.ChannelCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string message_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_type());
    }

    // optional bytes proto_desc = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_proto_desc());
    }

    // optional uint64 message_number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_message_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelCache::GetClassData() const { return &_class_data_; }

void ChannelCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChannelCache *>(to)->MergeFrom(
      static_cast<const ChannelCache &>(from));
}


void ChannelCache::MergeFrom(const ChannelCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.ChannelCache)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message_type(from._internal_message_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_proto_desc(from._internal_proto_desc());
    }
    if (cached_has_bits & 0x00000008u) {
      message_number_ = from.message_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelCache::CopyFrom(const ChannelCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.ChannelCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelCache::IsInitialized() const {
  return true;
}

void ChannelCache::InternalSwap(ChannelCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_type_, GetArenaForAllocation(),
      &other->message_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proto_desc_, GetArenaForAllocation(),
      &other->proto_desc_, other->GetArenaForAllocation()
  );
  swap(message_number_, other->message_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelCache::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2frecord_2eproto_getter, &descriptor_table_dox_2fproto_2frecord_2eproto_once,
      file_level_metadata_dox_2fproto_2frecord_2eproto[3]);
}

// ===================================================================

class SingleMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleMessage>()._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SingleMessage::SingleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.SingleMessage)
}
SingleMessage::SingleMessage(const SingleMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArenaForAllocation());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.SingleMessage)
}

inline void SingleMessage::SharedCtor() {
channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_ = uint64_t{0u};
}

SingleMessage::~SingleMessage() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.SingleMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SingleMessage::ArenaDtor(void* object) {
  SingleMessage* _this = reinterpret_cast< SingleMessage* >(object);
  (void)_this;
}
void SingleMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.SingleMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      content_.ClearNonDefaultToEmpty();
    }
  }
  time_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.SingleMessage.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.SingleMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.SingleMessage.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // optional uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_time(), target);
  }

  // optional bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.SingleMessage)
  return target;
}

size_t SingleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.SingleMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional bytes content = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_content());
    }

    // optional uint64 time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleMessage::GetClassData() const { return &_class_data_; }

void SingleMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SingleMessage *>(to)->MergeFrom(
      static_cast<const SingleMessage &>(from));
}


void SingleMessage::MergeFrom(const SingleMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.SingleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleMessage::CopyFrom(const SingleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.SingleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleMessage::IsInitialized() const {
  return true;
}

void SingleMessage::InternalSwap(SingleMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &channel_name_, GetArenaForAllocation(),
      &other->channel_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, GetArenaForAllocation(),
      &other->content_, other->GetArenaForAllocation()
  );
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2frecord_2eproto_getter, &descriptor_table_dox_2fproto_2frecord_2eproto_once,
      file_level_metadata_dox_2fproto_2frecord_2eproto[4]);
}

// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._has_bits_);
  static void set_has_major_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compress(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_chunk_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_segment_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chunk_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_channel_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_begin_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_message_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_chunk_raw_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_segment_raw_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_version_, &from.major_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_raw_size_) -
    reinterpret_cast<char*>(&major_version_)) + sizeof(segment_raw_size_));
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.Header)
}

inline void Header::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_raw_size_) -
    reinterpret_cast<char*>(&major_version_)) + sizeof(segment_raw_size_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&major_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compress_) -
        reinterpret_cast<char*>(&major_version_)) + sizeof(compress_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&is_complete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&segment_raw_size_) -
        reinterpret_cast<char*>(&is_complete_)) + sizeof(segment_raw_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 major_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_major_version(&has_bits);
          major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minor_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minor_version(&has_bits);
          minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .senior.dox.proto.CompressType compress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::senior::dox::proto::CompressType_IsValid(val))) {
            _internal_set_compress(static_cast<::senior::dox::proto::CompressType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 chunk_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_chunk_interval(&has_bits);
          chunk_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 segment_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_segment_interval(&has_bits);
          segment_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 index_position = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_index_position(&has_bits);
          index_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chunk_number = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_chunk_number(&has_bits);
          chunk_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 channel_number = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_channel_number(&has_bits);
          channel_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 begin_time = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_begin_time(&has_bits);
          begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 end_time = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 message_number = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_message_number(&has_bits);
          message_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 size = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_complete = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_complete(&has_bits);
          is_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chunk_raw_size = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_chunk_raw_size(&has_bits);
          chunk_raw_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 segment_raw_size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_segment_raw_size(&has_bits);
          segment_raw_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major_version(), target);
  }

  // optional uint32 minor_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor_version(), target);
  }

  // optional .senior.dox.proto.CompressType compress = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_compress(), target);
  }

  // optional uint64 chunk_interval = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chunk_interval(), target);
  }

  // optional uint64 segment_interval = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_segment_interval(), target);
  }

  // optional uint64 index_position = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_index_position(), target);
  }

  // optional uint64 chunk_number = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_chunk_number(), target);
  }

  // optional uint64 channel_number = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_channel_number(), target);
  }

  // optional uint64 begin_time = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_begin_time(), target);
  }

  // optional uint64 end_time = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_end_time(), target);
  }

  // optional uint64 message_number = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_message_number(), target);
  }

  // optional uint64 size = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_size(), target);
  }

  // optional bool is_complete = 13 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_complete(), target);
  }

  // optional uint64 chunk_raw_size = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_chunk_raw_size(), target);
  }

  // optional uint64 segment_raw_size = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_segment_raw_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 major_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_major_version());
    }

    // optional uint32 minor_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minor_version());
    }

    // optional uint64 chunk_interval = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_chunk_interval());
    }

    // optional uint64 segment_interval = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_segment_interval());
    }

    // optional uint64 index_position = 6 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_index_position());
    }

    // optional uint64 chunk_number = 7 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_chunk_number());
    }

    // optional uint64 channel_number = 8 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_channel_number());
    }

    // optional .senior.dox.proto.CompressType compress = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_compress());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool is_complete = 13 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint64 begin_time = 9 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_begin_time());
    }

    // optional uint64 end_time = 10 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_end_time());
    }

    // optional uint64 message_number = 11 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_message_number());
    }

    // optional uint64 size = 12 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_size());
    }

    // optional uint64 chunk_raw_size = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_chunk_raw_size());
    }

    // optional uint64 segment_raw_size = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_segment_raw_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      major_version_ = from.major_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      chunk_interval_ = from.chunk_interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      segment_interval_ = from.segment_interval_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_position_ = from.index_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      chunk_number_ = from.chunk_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      channel_number_ = from.channel_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      compress_ = from.compress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_complete_ = from.is_complete_;
    }
    if (cached_has_bits & 0x00000200u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      message_number_ = from.message_number_;
    }
    if (cached_has_bits & 0x00001000u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00002000u) {
      chunk_raw_size_ = from.chunk_raw_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      segment_raw_size_ = from.segment_raw_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, segment_raw_size_)
      + sizeof(Header::segment_raw_size_)
      - PROTOBUF_FIELD_OFFSET(Header, major_version_)>(
          reinterpret_cast<char*>(&major_version_),
          reinterpret_cast<char*>(&other->major_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2frecord_2eproto_getter, &descriptor_table_dox_2fproto_2frecord_2eproto_once,
      file_level_metadata_dox_2fproto_2frecord_2eproto[5]);
}

// ===================================================================

class Channel::_Internal {
 public:
  using HasBits = decltype(std::declval<Channel>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proto_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Channel::Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.Channel)
}
Channel::Channel(const Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_type()) {
    message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_type(), 
      GetArenaForAllocation());
  }
  proto_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proto_desc()) {
    proto_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_desc(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.Channel)
}

inline void Channel::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
proto_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.Channel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Channel::ArenaDtor(void* object) {
  Channel* _this = reinterpret_cast< Channel* >(object);
  (void)_this;
}
void Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      proto_desc_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.Channel.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.Channel.message_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes proto_desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_proto_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Channel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.Channel.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.Channel.message_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_type(), target);
  }

  // optional bytes proto_desc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_proto_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.Channel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string message_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_type());
    }

    // optional bytes proto_desc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_proto_desc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Channel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Channel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Channel::GetClassData() const { return &_class_data_; }

void Channel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Channel *>(to)->MergeFrom(
      static_cast<const Channel &>(from));
}


void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message_type(from._internal_message_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_proto_desc(from._internal_proto_desc());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::InternalSwap(Channel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_type_, GetArenaForAllocation(),
      &other->message_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proto_desc_, GetArenaForAllocation(),
      &other->proto_desc_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2frecord_2eproto_getter, &descriptor_table_dox_2fproto_2frecord_2eproto_once,
      file_level_metadata_dox_2fproto_2frecord_2eproto[6]);
}

// ===================================================================

class ChunkHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<ChunkHeader>()._has_bits_);
  static void set_has_begin_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_raw_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChunkHeader::ChunkHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.ChunkHeader)
}
ChunkHeader::ChunkHeader(const ChunkHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&begin_time_, &from.begin_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_size_) -
    reinterpret_cast<char*>(&begin_time_)) + sizeof(raw_size_));
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.ChunkHeader)
}

inline void ChunkHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&begin_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&raw_size_) -
    reinterpret_cast<char*>(&begin_time_)) + sizeof(raw_size_));
}

ChunkHeader::~ChunkHeader() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.ChunkHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChunkHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChunkHeader::ArenaDtor(void* object) {
  ChunkHeader* _this = reinterpret_cast< ChunkHeader* >(object);
  (void)_this;
}
void ChunkHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChunkHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.ChunkHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&begin_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_size_) -
        reinterpret_cast<char*>(&begin_time_)) + sizeof(raw_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 begin_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_begin_time(&has_bits);
          begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 message_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_message_number(&has_bits);
          message_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 raw_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_raw_size(&has_bits);
          raw_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.ChunkHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 begin_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_begin_time(), target);
  }

  // optional uint64 end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_end_time(), target);
  }

  // optional uint64 message_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_message_number(), target);
  }

  // optional uint64 raw_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_raw_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.ChunkHeader)
  return target;
}

size_t ChunkHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.ChunkHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 begin_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_begin_time());
    }

    // optional uint64 end_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_end_time());
    }

    // optional uint64 message_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_message_number());
    }

    // optional uint64 raw_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_raw_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunkHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChunkHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunkHeader::GetClassData() const { return &_class_data_; }

void ChunkHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChunkHeader *>(to)->MergeFrom(
      static_cast<const ChunkHeader &>(from));
}


void ChunkHeader::MergeFrom(const ChunkHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.ChunkHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      message_number_ = from.message_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_size_ = from.raw_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkHeader::CopyFrom(const ChunkHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.ChunkHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkHeader::IsInitialized() const {
  return true;
}

void ChunkHeader::InternalSwap(ChunkHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkHeader, raw_size_)
      + sizeof(ChunkHeader::raw_size_)
      - PROTOBUF_FIELD_OFFSET(ChunkHeader, begin_time_)>(
          reinterpret_cast<char*>(&begin_time_),
          reinterpret_cast<char*>(&other->begin_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2frecord_2eproto_getter, &descriptor_table_dox_2fproto_2frecord_2eproto_once,
      file_level_metadata_dox_2fproto_2frecord_2eproto[7]);
}

// ===================================================================

class ChunkBody::_Internal {
 public:
};

ChunkBody::ChunkBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.ChunkBody)
}
ChunkBody::ChunkBody(const ChunkBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.ChunkBody)
}

inline void ChunkBody::SharedCtor() {
}

ChunkBody::~ChunkBody() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.ChunkBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChunkBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChunkBody::ArenaDtor(void* object) {
  ChunkBody* _this = reinterpret_cast< ChunkBody* >(object);
  (void)_this;
}
void ChunkBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChunkBody::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.ChunkBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .senior.dox.proto.SingleMessage messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.ChunkBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .senior.dox.proto.SingleMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.ChunkBody)
  return target;
}

size_t ChunkBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.ChunkBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .senior.dox.proto.SingleMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunkBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChunkBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunkBody::GetClassData() const { return &_class_data_; }

void ChunkBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChunkBody *>(to)->MergeFrom(
      static_cast<const ChunkBody &>(from));
}


void ChunkBody::MergeFrom(const ChunkBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.ChunkBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkBody::CopyFrom(const ChunkBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.ChunkBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkBody::IsInitialized() const {
  return true;
}

void ChunkBody::InternalSwap(ChunkBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2frecord_2eproto_getter, &descriptor_table_dox_2fproto_2frecord_2eproto_once,
      file_level_metadata_dox_2fproto_2frecord_2eproto[8]);
}

// ===================================================================

class Index::_Internal {
 public:
};

Index::Index(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  indexes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.Index)
}
Index::Index(const Index& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      indexes_(from.indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.Index)
}

inline void Index::SharedCtor() {
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.Index)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Index::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Index::ArenaDtor(void* object) {
  Index* _this = reinterpret_cast< Index* >(object);
  (void)_this;
}
void Index::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.Index)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indexes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Index::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .senior.dox.proto.SingleIndex indexes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Index::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.Index)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .senior.dox.proto.SingleIndex indexes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_indexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_indexes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.Index)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .senior.dox.proto.SingleIndex indexes = 1;
  total_size += 1UL * this->_internal_indexes_size();
  for (const auto& msg : this->indexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Index::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Index::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Index::GetClassData() const { return &_class_data_; }

void Index::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Index *>(to)->MergeFrom(
      static_cast<const Index &>(from));
}


void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.Index)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indexes_.MergeFrom(from.indexes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::InternalSwap(Index* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  indexes_.InternalSwap(&other->indexes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Index::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2frecord_2eproto_getter, &descriptor_table_dox_2fproto_2frecord_2eproto_once,
      file_level_metadata_dox_2fproto_2frecord_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace dox
}  // namespace senior
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::senior::dox::proto::SingleIndex* Arena::CreateMaybeMessage< ::senior::dox::proto::SingleIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::SingleIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::ChunkHeaderCache* Arena::CreateMaybeMessage< ::senior::dox::proto::ChunkHeaderCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::ChunkHeaderCache >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::ChunkBodyCache* Arena::CreateMaybeMessage< ::senior::dox::proto::ChunkBodyCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::ChunkBodyCache >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::ChannelCache* Arena::CreateMaybeMessage< ::senior::dox::proto::ChannelCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::ChannelCache >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::SingleMessage* Arena::CreateMaybeMessage< ::senior::dox::proto::SingleMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::SingleMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::Header* Arena::CreateMaybeMessage< ::senior::dox::proto::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::Channel* Arena::CreateMaybeMessage< ::senior::dox::proto::Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::ChunkHeader* Arena::CreateMaybeMessage< ::senior::dox::proto::ChunkHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::ChunkHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::ChunkBody* Arena::CreateMaybeMessage< ::senior::dox::proto::ChunkBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::ChunkBody >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::Index* Arena::CreateMaybeMessage< ::senior::dox::proto::Index >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::Index >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
