// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dox/proto/monopoly_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dox_2fproto_2fmonopoly_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dox_2fproto_2fmonopoly_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dox_2fproto_2fmonopoly_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dox_2fproto_2fmonopoly_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto;
namespace senior {
namespace dox {
namespace proto {
class MonopolyConf;
struct MonopolyConfDefaultTypeInternal;
extern MonopolyConfDefaultTypeInternal _MonopolyConf_default_instance_;
class MonopolyTask;
struct MonopolyTaskDefaultTypeInternal;
extern MonopolyTaskDefaultTypeInternal _MonopolyTask_default_instance_;
class Sched2Group;
struct Sched2GroupDefaultTypeInternal;
extern Sched2GroupDefaultTypeInternal _Sched2Group_default_instance_;
}  // namespace proto
}  // namespace dox
}  // namespace senior
PROTOBUF_NAMESPACE_OPEN
template<> ::senior::dox::proto::MonopolyConf* Arena::CreateMaybeMessage<::senior::dox::proto::MonopolyConf>(Arena*);
template<> ::senior::dox::proto::MonopolyTask* Arena::CreateMaybeMessage<::senior::dox::proto::MonopolyTask>(Arena*);
template<> ::senior::dox::proto::Sched2Group* Arena::CreateMaybeMessage<::senior::dox::proto::Sched2Group>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace senior {
namespace dox {
namespace proto {

// ===================================================================

class MonopolyTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senior.dox.proto.MonopolyTask) */ {
 public:
  inline MonopolyTask() : MonopolyTask(nullptr) {}
  ~MonopolyTask() override;
  explicit constexpr MonopolyTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonopolyTask(const MonopolyTask& from);
  MonopolyTask(MonopolyTask&& from) noexcept
    : MonopolyTask() {
    *this = ::std::move(from);
  }

  inline MonopolyTask& operator=(const MonopolyTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonopolyTask& operator=(MonopolyTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonopolyTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonopolyTask* internal_default_instance() {
    return reinterpret_cast<const MonopolyTask*>(
               &_MonopolyTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MonopolyTask& a, MonopolyTask& b) {
    a.Swap(&b);
  }
  inline void Swap(MonopolyTask* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonopolyTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonopolyTask* New() const final {
    return new MonopolyTask();
  }

  MonopolyTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonopolyTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonopolyTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonopolyTask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonopolyTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senior.dox.proto.MonopolyTask";
  }
  protected:
  explicit MonopolyTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGroupNameFieldNumber = 3,
    kPrioFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string group_name = 3;
  bool has_group_name() const;
  private:
  bool _internal_has_group_name() const;
  public:
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // optional uint32 prio = 2 [default = 1];
  bool has_prio() const;
  private:
  bool _internal_has_prio() const;
  public:
  void clear_prio();
  ::PROTOBUF_NAMESPACE_ID::uint32 prio() const;
  void set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prio() const;
  void _internal_set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:senior.dox.proto.MonopolyTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prio_;
  friend struct ::TableStruct_dox_2fproto_2fmonopoly_5fconf_2eproto;
};
// -------------------------------------------------------------------

class Sched2Group final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senior.dox.proto.Sched2Group) */ {
 public:
  inline Sched2Group() : Sched2Group(nullptr) {}
  ~Sched2Group() override;
  explicit constexpr Sched2Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sched2Group(const Sched2Group& from);
  Sched2Group(Sched2Group&& from) noexcept
    : Sched2Group() {
    *this = ::std::move(from);
  }

  inline Sched2Group& operator=(const Sched2Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sched2Group& operator=(Sched2Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sched2Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sched2Group* internal_default_instance() {
    return reinterpret_cast<const Sched2Group*>(
               &_Sched2Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Sched2Group& a, Sched2Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Sched2Group* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sched2Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sched2Group* New() const final {
    return new Sched2Group();
  }

  Sched2Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sched2Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sched2Group& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sched2Group& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sched2Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senior.dox.proto.Sched2Group";
  }
  protected:
  explicit Sched2Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 7,
    kNameFieldNumber = 1,
    kAffinityFieldNumber = 3,
    kCpusetFieldNumber = 4,
    kProcessorPolicyFieldNumber = 5,
    kProcessorNumFieldNumber = 2,
    kProcessorPrioFieldNumber = 6,
  };
  // repeated .senior.dox.proto.MonopolyTask tasks = 7;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::senior::dox::proto::MonopolyTask* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senior::dox::proto::MonopolyTask >*
      mutable_tasks();
  private:
  const ::senior::dox::proto::MonopolyTask& _internal_tasks(int index) const;
  ::senior::dox::proto::MonopolyTask* _internal_add_tasks();
  public:
  const ::senior::dox::proto::MonopolyTask& tasks(int index) const;
  ::senior::dox::proto::MonopolyTask* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senior::dox::proto::MonopolyTask >&
      tasks() const;

  // required string name = 1 [default = "default_grp"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string affinity = 3;
  bool has_affinity() const;
  private:
  bool _internal_has_affinity() const;
  public:
  void clear_affinity();
  const std::string& affinity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affinity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affinity();
  PROTOBUF_MUST_USE_RESULT std::string* release_affinity();
  void set_allocated_affinity(std::string* affinity);
  private:
  const std::string& _internal_affinity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affinity(const std::string& value);
  std::string* _internal_mutable_affinity();
  public:

  // optional string cpuset = 4;
  bool has_cpuset() const;
  private:
  bool _internal_has_cpuset() const;
  public:
  void clear_cpuset();
  const std::string& cpuset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpuset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpuset();
  PROTOBUF_MUST_USE_RESULT std::string* release_cpuset();
  void set_allocated_cpuset(std::string* cpuset);
  private:
  const std::string& _internal_cpuset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpuset(const std::string& value);
  std::string* _internal_mutable_cpuset();
  public:

  // optional string processor_policy = 5;
  bool has_processor_policy() const;
  private:
  bool _internal_has_processor_policy() const;
  public:
  void clear_processor_policy();
  const std::string& processor_policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_processor_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_processor_policy();
  PROTOBUF_MUST_USE_RESULT std::string* release_processor_policy();
  void set_allocated_processor_policy(std::string* processor_policy);
  private:
  const std::string& _internal_processor_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_processor_policy(const std::string& value);
  std::string* _internal_mutable_processor_policy();
  public:

  // optional uint32 processor_num = 2;
  bool has_processor_num() const;
  private:
  bool _internal_has_processor_num() const;
  public:
  void clear_processor_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 processor_num() const;
  void set_processor_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_processor_num() const;
  void _internal_set_processor_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 processor_prio = 6 [default = 0];
  bool has_processor_prio() const;
  private:
  bool _internal_has_processor_prio() const;
  public:
  void clear_processor_prio();
  ::PROTOBUF_NAMESPACE_ID::int32 processor_prio() const;
  void set_processor_prio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processor_prio() const;
  void _internal_set_processor_prio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:senior.dox.proto.Sched2Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senior::dox::proto::MonopolyTask > tasks_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affinity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processor_policy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 processor_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 processor_prio_;
  friend struct ::TableStruct_dox_2fproto_2fmonopoly_5fconf_2eproto;
};
// -------------------------------------------------------------------

class MonopolyConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senior.dox.proto.MonopolyConf) */ {
 public:
  inline MonopolyConf() : MonopolyConf(nullptr) {}
  ~MonopolyConf() override;
  explicit constexpr MonopolyConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonopolyConf(const MonopolyConf& from);
  MonopolyConf(MonopolyConf&& from) noexcept
    : MonopolyConf() {
    *this = ::std::move(from);
  }

  inline MonopolyConf& operator=(const MonopolyConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonopolyConf& operator=(MonopolyConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonopolyConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonopolyConf* internal_default_instance() {
    return reinterpret_cast<const MonopolyConf*>(
               &_MonopolyConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MonopolyConf& a, MonopolyConf& b) {
    a.Swap(&b);
  }
  inline void Swap(MonopolyConf* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonopolyConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonopolyConf* New() const final {
    return new MonopolyConf();
  }

  MonopolyConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonopolyConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonopolyConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonopolyConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonopolyConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senior.dox.proto.MonopolyConf";
  }
  protected:
  explicit MonopolyConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .senior.dox.proto.Sched2Group groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::senior::dox::proto::Sched2Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senior::dox::proto::Sched2Group >*
      mutable_groups();
  private:
  const ::senior::dox::proto::Sched2Group& _internal_groups(int index) const;
  ::senior::dox::proto::Sched2Group* _internal_add_groups();
  public:
  const ::senior::dox::proto::Sched2Group& groups(int index) const;
  ::senior::dox::proto::Sched2Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senior::dox::proto::Sched2Group >&
      groups() const;

  // @@protoc_insertion_point(class_scope:senior.dox.proto.MonopolyConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senior::dox::proto::Sched2Group > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dox_2fproto_2fmonopoly_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MonopolyTask

// optional string name = 1;
inline bool MonopolyTask::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MonopolyTask::has_name() const {
  return _internal_has_name();
}
inline void MonopolyTask::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MonopolyTask::name() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.MonopolyTask.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonopolyTask::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:senior.dox.proto.MonopolyTask.name)
}
inline std::string* MonopolyTask::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.MonopolyTask.name)
  return _s;
}
inline const std::string& MonopolyTask::_internal_name() const {
  return name_.Get();
}
inline void MonopolyTask::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MonopolyTask::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MonopolyTask::release_name() {
  // @@protoc_insertion_point(field_release:senior.dox.proto.MonopolyTask.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MonopolyTask::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.MonopolyTask.name)
}

// optional uint32 prio = 2 [default = 1];
inline bool MonopolyTask::_internal_has_prio() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MonopolyTask::has_prio() const {
  return _internal_has_prio();
}
inline void MonopolyTask::clear_prio() {
  prio_ = 1u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonopolyTask::_internal_prio() const {
  return prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MonopolyTask::prio() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.MonopolyTask.prio)
  return _internal_prio();
}
inline void MonopolyTask::_internal_set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  prio_ = value;
}
inline void MonopolyTask::set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prio(value);
  // @@protoc_insertion_point(field_set:senior.dox.proto.MonopolyTask.prio)
}

// optional string group_name = 3;
inline bool MonopolyTask::_internal_has_group_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MonopolyTask::has_group_name() const {
  return _internal_has_group_name();
}
inline void MonopolyTask::clear_group_name() {
  group_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MonopolyTask::group_name() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.MonopolyTask.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonopolyTask::set_group_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:senior.dox.proto.MonopolyTask.group_name)
}
inline std::string* MonopolyTask::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.MonopolyTask.group_name)
  return _s;
}
inline const std::string& MonopolyTask::_internal_group_name() const {
  return group_name_.Get();
}
inline void MonopolyTask::_internal_set_group_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MonopolyTask::_internal_mutable_group_name() {
  _has_bits_[0] |= 0x00000002u;
  return group_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MonopolyTask::release_group_name() {
  // @@protoc_insertion_point(field_release:senior.dox.proto.MonopolyTask.group_name)
  if (!_internal_has_group_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return group_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MonopolyTask::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.MonopolyTask.group_name)
}

// -------------------------------------------------------------------

// Sched2Group

// required string name = 1 [default = "default_grp"];
inline bool Sched2Group::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sched2Group::has_name() const {
  return _internal_has_name();
}
inline void Sched2Group::clear_name() {
  name_.ClearToDefault(::senior::dox::proto::Sched2Group::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Sched2Group::name() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.Sched2Group.name)
  if (name_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_name_.get();
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sched2Group::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:senior.dox.proto.Sched2Group.name)
}
inline std::string* Sched2Group::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.Sched2Group.name)
  return _s;
}
inline const std::string& Sched2Group::_internal_name() const {
  return name_.Get();
}
inline void Sched2Group::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sched2Group::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::senior::dox::proto::Sched2Group::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
}
inline std::string* Sched2Group::release_name() {
  // @@protoc_insertion_point(field_release:senior.dox.proto.Sched2Group.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
}
inline void Sched2Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(nullptr, name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.Sched2Group.name)
}

// optional uint32 processor_num = 2;
inline bool Sched2Group::_internal_has_processor_num() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Sched2Group::has_processor_num() const {
  return _internal_has_processor_num();
}
inline void Sched2Group::clear_processor_num() {
  processor_num_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sched2Group::_internal_processor_num() const {
  return processor_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sched2Group::processor_num() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.Sched2Group.processor_num)
  return _internal_processor_num();
}
inline void Sched2Group::_internal_set_processor_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  processor_num_ = value;
}
inline void Sched2Group::set_processor_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_processor_num(value);
  // @@protoc_insertion_point(field_set:senior.dox.proto.Sched2Group.processor_num)
}

// optional string affinity = 3;
inline bool Sched2Group::_internal_has_affinity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sched2Group::has_affinity() const {
  return _internal_has_affinity();
}
inline void Sched2Group::clear_affinity() {
  affinity_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Sched2Group::affinity() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.Sched2Group.affinity)
  return _internal_affinity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sched2Group::set_affinity(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:senior.dox.proto.Sched2Group.affinity)
}
inline std::string* Sched2Group::mutable_affinity() {
  std::string* _s = _internal_mutable_affinity();
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.Sched2Group.affinity)
  return _s;
}
inline const std::string& Sched2Group::_internal_affinity() const {
  return affinity_.Get();
}
inline void Sched2Group::_internal_set_affinity(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sched2Group::_internal_mutable_affinity() {
  _has_bits_[0] |= 0x00000002u;
  return affinity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sched2Group::release_affinity() {
  // @@protoc_insertion_point(field_release:senior.dox.proto.Sched2Group.affinity)
  if (!_internal_has_affinity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return affinity_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sched2Group::set_allocated_affinity(std::string* affinity) {
  if (affinity != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  affinity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affinity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.Sched2Group.affinity)
}

// optional string cpuset = 4;
inline bool Sched2Group::_internal_has_cpuset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Sched2Group::has_cpuset() const {
  return _internal_has_cpuset();
}
inline void Sched2Group::clear_cpuset() {
  cpuset_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Sched2Group::cpuset() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.Sched2Group.cpuset)
  return _internal_cpuset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sched2Group::set_cpuset(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 cpuset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:senior.dox.proto.Sched2Group.cpuset)
}
inline std::string* Sched2Group::mutable_cpuset() {
  std::string* _s = _internal_mutable_cpuset();
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.Sched2Group.cpuset)
  return _s;
}
inline const std::string& Sched2Group::_internal_cpuset() const {
  return cpuset_.Get();
}
inline void Sched2Group::_internal_set_cpuset(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cpuset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sched2Group::_internal_mutable_cpuset() {
  _has_bits_[0] |= 0x00000004u;
  return cpuset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sched2Group::release_cpuset() {
  // @@protoc_insertion_point(field_release:senior.dox.proto.Sched2Group.cpuset)
  if (!_internal_has_cpuset()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cpuset_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sched2Group::set_allocated_cpuset(std::string* cpuset) {
  if (cpuset != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cpuset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuset,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.Sched2Group.cpuset)
}

// optional string processor_policy = 5;
inline bool Sched2Group::_internal_has_processor_policy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Sched2Group::has_processor_policy() const {
  return _internal_has_processor_policy();
}
inline void Sched2Group::clear_processor_policy() {
  processor_policy_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Sched2Group::processor_policy() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.Sched2Group.processor_policy)
  return _internal_processor_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sched2Group::set_processor_policy(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 processor_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:senior.dox.proto.Sched2Group.processor_policy)
}
inline std::string* Sched2Group::mutable_processor_policy() {
  std::string* _s = _internal_mutable_processor_policy();
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.Sched2Group.processor_policy)
  return _s;
}
inline const std::string& Sched2Group::_internal_processor_policy() const {
  return processor_policy_.Get();
}
inline void Sched2Group::_internal_set_processor_policy(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  processor_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sched2Group::_internal_mutable_processor_policy() {
  _has_bits_[0] |= 0x00000008u;
  return processor_policy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sched2Group::release_processor_policy() {
  // @@protoc_insertion_point(field_release:senior.dox.proto.Sched2Group.processor_policy)
  if (!_internal_has_processor_policy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return processor_policy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sched2Group::set_allocated_processor_policy(std::string* processor_policy) {
  if (processor_policy != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  processor_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processor_policy,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.Sched2Group.processor_policy)
}

// optional int32 processor_prio = 6 [default = 0];
inline bool Sched2Group::_internal_has_processor_prio() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Sched2Group::has_processor_prio() const {
  return _internal_has_processor_prio();
}
inline void Sched2Group::clear_processor_prio() {
  processor_prio_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sched2Group::_internal_processor_prio() const {
  return processor_prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sched2Group::processor_prio() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.Sched2Group.processor_prio)
  return _internal_processor_prio();
}
inline void Sched2Group::_internal_set_processor_prio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  processor_prio_ = value;
}
inline void Sched2Group::set_processor_prio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processor_prio(value);
  // @@protoc_insertion_point(field_set:senior.dox.proto.Sched2Group.processor_prio)
}

// repeated .senior.dox.proto.MonopolyTask tasks = 7;
inline int Sched2Group::_internal_tasks_size() const {
  return tasks_.size();
}
inline int Sched2Group::tasks_size() const {
  return _internal_tasks_size();
}
inline void Sched2Group::clear_tasks() {
  tasks_.Clear();
}
inline ::senior::dox::proto::MonopolyTask* Sched2Group::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.Sched2Group.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senior::dox::proto::MonopolyTask >*
Sched2Group::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:senior.dox.proto.Sched2Group.tasks)
  return &tasks_;
}
inline const ::senior::dox::proto::MonopolyTask& Sched2Group::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::senior::dox::proto::MonopolyTask& Sched2Group::tasks(int index) const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.Sched2Group.tasks)
  return _internal_tasks(index);
}
inline ::senior::dox::proto::MonopolyTask* Sched2Group::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::senior::dox::proto::MonopolyTask* Sched2Group::add_tasks() {
  ::senior::dox::proto::MonopolyTask* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:senior.dox.proto.Sched2Group.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senior::dox::proto::MonopolyTask >&
Sched2Group::tasks() const {
  // @@protoc_insertion_point(field_list:senior.dox.proto.Sched2Group.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// MonopolyConf

// repeated .senior.dox.proto.Sched2Group groups = 1;
inline int MonopolyConf::_internal_groups_size() const {
  return groups_.size();
}
inline int MonopolyConf::groups_size() const {
  return _internal_groups_size();
}
inline void MonopolyConf::clear_groups() {
  groups_.Clear();
}
inline ::senior::dox::proto::Sched2Group* MonopolyConf::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.MonopolyConf.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senior::dox::proto::Sched2Group >*
MonopolyConf::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:senior.dox.proto.MonopolyConf.groups)
  return &groups_;
}
inline const ::senior::dox::proto::Sched2Group& MonopolyConf::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::senior::dox::proto::Sched2Group& MonopolyConf::groups(int index) const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.MonopolyConf.groups)
  return _internal_groups(index);
}
inline ::senior::dox::proto::Sched2Group* MonopolyConf::_internal_add_groups() {
  return groups_.Add();
}
inline ::senior::dox::proto::Sched2Group* MonopolyConf::add_groups() {
  ::senior::dox::proto::Sched2Group* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:senior.dox.proto.MonopolyConf.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senior::dox::proto::Sched2Group >&
MonopolyConf::groups() const {
  // @@protoc_insertion_point(field_list:senior.dox.proto.MonopolyConf.groups)
  return groups_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dox
}  // namespace senior

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dox_2fproto_2fmonopoly_5fconf_2eproto
