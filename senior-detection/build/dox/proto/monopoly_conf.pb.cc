// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dox/proto/monopoly_conf.proto

#include "dox/proto/monopoly_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace senior {
namespace dox {
namespace proto {
constexpr MonopolyTask::MonopolyTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prio_(1u){}
struct MonopolyTaskDefaultTypeInternal {
  constexpr MonopolyTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MonopolyTaskDefaultTypeInternal() {}
  union {
    MonopolyTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MonopolyTaskDefaultTypeInternal _MonopolyTask_default_instance_;
constexpr Sched2Group::Sched2Group(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_()
  , name_(nullptr)
  , affinity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpuset_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , processor_policy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , processor_num_(0u)
  , processor_prio_(0){}
struct Sched2GroupDefaultTypeInternal {
  constexpr Sched2GroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Sched2GroupDefaultTypeInternal() {}
  union {
    Sched2Group _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Sched2GroupDefaultTypeInternal _Sched2Group_default_instance_;
constexpr MonopolyConf::MonopolyConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groups_(){}
struct MonopolyConfDefaultTypeInternal {
  constexpr MonopolyConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MonopolyConfDefaultTypeInternal() {}
  union {
    MonopolyConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MonopolyConfDefaultTypeInternal _MonopolyConf_default_instance_;
}  // namespace proto
}  // namespace dox
}  // namespace senior
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dox_2fproto_2fmonopoly_5fconf_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dox_2fproto_2fmonopoly_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dox_2fproto_2fmonopoly_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dox_2fproto_2fmonopoly_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::MonopolyTask, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::MonopolyTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::MonopolyTask, name_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::MonopolyTask, prio_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::MonopolyTask, group_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Sched2Group, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Sched2Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Sched2Group, name_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Sched2Group, processor_num_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Sched2Group, affinity_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Sched2Group, cpuset_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Sched2Group, processor_policy_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Sched2Group, processor_prio_),
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::Sched2Group, tasks_),
  0,
  4,
  1,
  2,
  3,
  5,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::MonopolyConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::senior::dox::proto::MonopolyConf, groups_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::senior::dox::proto::MonopolyTask)},
  { 11, 23, sizeof(::senior::dox::proto::Sched2Group)},
  { 30, -1, sizeof(::senior::dox::proto::MonopolyConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_MonopolyTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_Sched2Group_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::senior::dox::proto::_MonopolyConf_default_instance_),
};

const char descriptor_table_protodef_dox_2fproto_2fmonopoly_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035dox/proto/monopoly_conf.proto\022\020senior."
  "dox.proto\"A\n\014MonopolyTask\022\014\n\004name\030\001 \001(\t\022"
  "\017\n\004prio\030\002 \001(\r:\0011\022\022\n\ngroup_name\030\003 \001(\t\"\305\001\n"
  "\013Sched2Group\022\031\n\004name\030\001 \002(\t:\013default_grp\022"
  "\025\n\rprocessor_num\030\002 \001(\r\022\020\n\010affinity\030\003 \001(\t"
  "\022\016\n\006cpuset\030\004 \001(\t\022\030\n\020processor_policy\030\005 \001"
  "(\t\022\031\n\016processor_prio\030\006 \001(\005:\0010\022-\n\005tasks\030\007"
  " \003(\0132\036.senior.dox.proto.MonopolyTask\"=\n\014"
  "MonopolyConf\022-\n\006groups\030\001 \003(\0132\035.senior.do"
  "x.proto.Sched2Group"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto = {
  false, false, 379, descriptor_table_protodef_dox_2fproto_2fmonopoly_5fconf_2eproto, "dox/proto/monopoly_conf.proto", 
  &descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_dox_2fproto_2fmonopoly_5fconf_2eproto::offsets,
  file_level_metadata_dox_2fproto_2fmonopoly_5fconf_2eproto, file_level_enum_descriptors_dox_2fproto_2fmonopoly_5fconf_2eproto, file_level_service_descriptors_dox_2fproto_2fmonopoly_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto_getter() {
  return &descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dox_2fproto_2fmonopoly_5fconf_2eproto(&descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto);
namespace senior {
namespace dox {
namespace proto {

// ===================================================================

class MonopolyTask::_Internal {
 public:
  using HasBits = decltype(std::declval<MonopolyTask>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MonopolyTask::MonopolyTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.MonopolyTask)
}
MonopolyTask::MonopolyTask(const MonopolyTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_group_name()) {
    group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_name(), 
      GetArenaForAllocation());
  }
  prio_ = from.prio_;
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.MonopolyTask)
}

inline void MonopolyTask::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
prio_ = 1u;
}

MonopolyTask::~MonopolyTask() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.MonopolyTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MonopolyTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MonopolyTask::ArenaDtor(void* object) {
  MonopolyTask* _this = reinterpret_cast< MonopolyTask* >(object);
  (void)_this;
}
void MonopolyTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonopolyTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonopolyTask::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.MonopolyTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      group_name_.ClearNonDefaultToEmpty();
    }
    prio_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonopolyTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.MonopolyTask.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prio = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prio(&has_bits);
          prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string group_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.MonopolyTask.group_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonopolyTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.MonopolyTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.MonopolyTask.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 prio = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prio(), target);
  }

  // optional string group_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.MonopolyTask.group_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_group_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.MonopolyTask)
  return target;
}

size_t MonopolyTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.MonopolyTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string group_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_name());
    }

    // optional uint32 prio = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prio());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonopolyTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonopolyTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonopolyTask::GetClassData() const { return &_class_data_; }

void MonopolyTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MonopolyTask *>(to)->MergeFrom(
      static_cast<const MonopolyTask &>(from));
}


void MonopolyTask::MergeFrom(const MonopolyTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.MonopolyTask)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_group_name(from._internal_group_name());
    }
    if (cached_has_bits & 0x00000004u) {
      prio_ = from.prio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonopolyTask::CopyFrom(const MonopolyTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.MonopolyTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonopolyTask::IsInitialized() const {
  return true;
}

void MonopolyTask::InternalSwap(MonopolyTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_name_, GetArenaForAllocation(),
      &other->group_name_, other->GetArenaForAllocation()
  );
  swap(prio_, other->prio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonopolyTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto_getter, &descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto_once,
      file_level_metadata_dox_2fproto_2fmonopoly_5fconf_2eproto[0]);
}

// ===================================================================

class Sched2Group::_Internal {
 public:
  using HasBits = decltype(std::declval<Sched2Group>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_processor_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_affinity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cpuset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_processor_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_processor_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString Sched2Group::_i_give_permission_to_break_this_code_default_name_{{{"default_grp", 11}}, {nullptr}};
Sched2Group::Sched2Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.Sched2Group)
}
Sched2Group::Sched2Group(const Sched2Group& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  affinity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_affinity()) {
    affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_affinity(), 
      GetArenaForAllocation());
  }
  cpuset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cpuset()) {
    cpuset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpuset(), 
      GetArenaForAllocation());
  }
  processor_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_processor_policy()) {
    processor_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_processor_policy(), 
      GetArenaForAllocation());
  }
  ::memcpy(&processor_num_, &from.processor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&processor_prio_) -
    reinterpret_cast<char*>(&processor_num_)) + sizeof(processor_prio_));
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.Sched2Group)
}

inline void Sched2Group::SharedCtor() {
name_.UnsafeSetDefault(nullptr);
affinity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cpuset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
processor_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&processor_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&processor_prio_) -
    reinterpret_cast<char*>(&processor_num_)) + sizeof(processor_prio_));
}

Sched2Group::~Sched2Group() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.Sched2Group)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sched2Group::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(nullptr);
  affinity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpuset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processor_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Sched2Group::ArenaDtor(void* object) {
  Sched2Group* _this = reinterpret_cast< Sched2Group* >(object);
  (void)_this;
}
void Sched2Group::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sched2Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sched2Group::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.Sched2Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearToDefault(::senior::dox::proto::Sched2Group::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      affinity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      cpuset_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      processor_policy_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&processor_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&processor_prio_) -
        reinterpret_cast<char*>(&processor_num_)) + sizeof(processor_prio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sched2Group::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1 [default = "default_grp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.Sched2Group.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 processor_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_processor_num(&has_bits);
          processor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string affinity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_affinity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.Sched2Group.affinity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cpuset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cpuset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.Sched2Group.cpuset");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string processor_policy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_processor_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "senior.dox.proto.Sched2Group.processor_policy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 processor_prio = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_processor_prio(&has_bits);
          processor_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .senior.dox.proto.MonopolyTask tasks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sched2Group::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.Sched2Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1 [default = "default_grp"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.Sched2Group.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 processor_num = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_processor_num(), target);
  }

  // optional string affinity = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_affinity().data(), static_cast<int>(this->_internal_affinity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.Sched2Group.affinity");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_affinity(), target);
  }

  // optional string cpuset = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cpuset().data(), static_cast<int>(this->_internal_cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.Sched2Group.cpuset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cpuset(), target);
  }

  // optional string processor_policy = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_processor_policy().data(), static_cast<int>(this->_internal_processor_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "senior.dox.proto.Sched2Group.processor_policy");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_processor_policy(), target);
  }

  // optional int32 processor_prio = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_processor_prio(), target);
  }

  // repeated .senior.dox.proto.MonopolyTask tasks = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.Sched2Group)
  return target;
}

size_t Sched2Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.Sched2Group)
  size_t total_size = 0;

  // required string name = 1 [default = "default_grp"];
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .senior.dox.proto.MonopolyTask tasks = 7;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string affinity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_affinity());
    }

    // optional string cpuset = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cpuset());
    }

    // optional string processor_policy = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_processor_policy());
    }

    // optional uint32 processor_num = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_processor_num());
    }

    // optional int32 processor_prio = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_processor_prio());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sched2Group::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sched2Group::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sched2Group::GetClassData() const { return &_class_data_; }

void Sched2Group::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Sched2Group *>(to)->MergeFrom(
      static_cast<const Sched2Group &>(from));
}


void Sched2Group::MergeFrom(const Sched2Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.Sched2Group)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_affinity(from._internal_affinity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cpuset(from._internal_cpuset());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_processor_policy(from._internal_processor_policy());
    }
    if (cached_has_bits & 0x00000010u) {
      processor_num_ = from.processor_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      processor_prio_ = from.processor_prio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sched2Group::CopyFrom(const Sched2Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.Sched2Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sched2Group::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Sched2Group::InternalSwap(Sched2Group* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tasks_.InternalSwap(&other->tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &affinity_, GetArenaForAllocation(),
      &other->affinity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpuset_, GetArenaForAllocation(),
      &other->cpuset_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &processor_policy_, GetArenaForAllocation(),
      &other->processor_policy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sched2Group, processor_prio_)
      + sizeof(Sched2Group::processor_prio_)
      - PROTOBUF_FIELD_OFFSET(Sched2Group, processor_num_)>(
          reinterpret_cast<char*>(&processor_num_),
          reinterpret_cast<char*>(&other->processor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sched2Group::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto_getter, &descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto_once,
      file_level_metadata_dox_2fproto_2fmonopoly_5fconf_2eproto[1]);
}

// ===================================================================

class MonopolyConf::_Internal {
 public:
};

MonopolyConf::MonopolyConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:senior.dox.proto.MonopolyConf)
}
MonopolyConf::MonopolyConf(const MonopolyConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:senior.dox.proto.MonopolyConf)
}

inline void MonopolyConf::SharedCtor() {
}

MonopolyConf::~MonopolyConf() {
  // @@protoc_insertion_point(destructor:senior.dox.proto.MonopolyConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MonopolyConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MonopolyConf::ArenaDtor(void* object) {
  MonopolyConf* _this = reinterpret_cast< MonopolyConf* >(object);
  (void)_this;
}
void MonopolyConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonopolyConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonopolyConf::Clear() {
// @@protoc_insertion_point(message_clear_start:senior.dox.proto.MonopolyConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonopolyConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .senior.dox.proto.Sched2Group groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonopolyConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:senior.dox.proto.MonopolyConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .senior.dox.proto.Sched2Group groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:senior.dox.proto.MonopolyConf)
  return target;
}

size_t MonopolyConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:senior.dox.proto.MonopolyConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .senior.dox.proto.Sched2Group groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonopolyConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonopolyConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonopolyConf::GetClassData() const { return &_class_data_; }

void MonopolyConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MonopolyConf *>(to)->MergeFrom(
      static_cast<const MonopolyConf &>(from));
}


void MonopolyConf::MergeFrom(const MonopolyConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:senior.dox.proto.MonopolyConf)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonopolyConf::CopyFrom(const MonopolyConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:senior.dox.proto.MonopolyConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonopolyConf::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(groups_)) return false;
  return true;
}

void MonopolyConf::InternalSwap(MonopolyConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonopolyConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto_getter, &descriptor_table_dox_2fproto_2fmonopoly_5fconf_2eproto_once,
      file_level_metadata_dox_2fproto_2fmonopoly_5fconf_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace dox
}  // namespace senior
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::senior::dox::proto::MonopolyTask* Arena::CreateMaybeMessage< ::senior::dox::proto::MonopolyTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::MonopolyTask >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::Sched2Group* Arena::CreateMaybeMessage< ::senior::dox::proto::Sched2Group >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::Sched2Group >(arena);
}
template<> PROTOBUF_NOINLINE ::senior::dox::proto::MonopolyConf* Arena::CreateMaybeMessage< ::senior::dox::proto::MonopolyConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::senior::dox::proto::MonopolyConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
