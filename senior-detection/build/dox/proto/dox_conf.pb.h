// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dox/proto/dox_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dox_2fproto_2fdox_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dox_2fproto_2fdox_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dox/proto/scheduler_conf.pb.h"
#include "dox/proto/transport_conf.pb.h"
#include "dox/proto/run_mode_conf.pb.h"
#include "dox/proto/perf_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dox_2fproto_2fdox_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dox_2fproto_2fdox_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dox_2fproto_2fdox_5fconf_2eproto;
namespace senior {
namespace dox {
namespace proto {
class CyberConfig;
struct CyberConfigDefaultTypeInternal;
extern CyberConfigDefaultTypeInternal _CyberConfig_default_instance_;
}  // namespace proto
}  // namespace dox
}  // namespace senior
PROTOBUF_NAMESPACE_OPEN
template<> ::senior::dox::proto::CyberConfig* Arena::CreateMaybeMessage<::senior::dox::proto::CyberConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace senior {
namespace dox {
namespace proto {

// ===================================================================

class CyberConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senior.dox.proto.CyberConfig) */ {
 public:
  inline CyberConfig() : CyberConfig(nullptr) {}
  ~CyberConfig() override;
  explicit constexpr CyberConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CyberConfig(const CyberConfig& from);
  CyberConfig(CyberConfig&& from) noexcept
    : CyberConfig() {
    *this = ::std::move(from);
  }

  inline CyberConfig& operator=(const CyberConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CyberConfig& operator=(CyberConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CyberConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CyberConfig* internal_default_instance() {
    return reinterpret_cast<const CyberConfig*>(
               &_CyberConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CyberConfig& a, CyberConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CyberConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CyberConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CyberConfig* New() const final {
    return new CyberConfig();
  }

  CyberConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CyberConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CyberConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CyberConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CyberConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senior.dox.proto.CyberConfig";
  }
  protected:
  explicit CyberConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchedulerConfFieldNumber = 1,
    kTransportConfFieldNumber = 2,
    kRunModeConfFieldNumber = 3,
    kPerfConfFieldNumber = 4,
  };
  // optional .senior.dox.proto.SchedulerConf scheduler_conf = 1;
  bool has_scheduler_conf() const;
  private:
  bool _internal_has_scheduler_conf() const;
  public:
  void clear_scheduler_conf();
  const ::senior::dox::proto::SchedulerConf& scheduler_conf() const;
  PROTOBUF_MUST_USE_RESULT ::senior::dox::proto::SchedulerConf* release_scheduler_conf();
  ::senior::dox::proto::SchedulerConf* mutable_scheduler_conf();
  void set_allocated_scheduler_conf(::senior::dox::proto::SchedulerConf* scheduler_conf);
  private:
  const ::senior::dox::proto::SchedulerConf& _internal_scheduler_conf() const;
  ::senior::dox::proto::SchedulerConf* _internal_mutable_scheduler_conf();
  public:
  void unsafe_arena_set_allocated_scheduler_conf(
      ::senior::dox::proto::SchedulerConf* scheduler_conf);
  ::senior::dox::proto::SchedulerConf* unsafe_arena_release_scheduler_conf();

  // optional .senior.dox.proto.TransportConf transport_conf = 2;
  bool has_transport_conf() const;
  private:
  bool _internal_has_transport_conf() const;
  public:
  void clear_transport_conf();
  const ::senior::dox::proto::TransportConf& transport_conf() const;
  PROTOBUF_MUST_USE_RESULT ::senior::dox::proto::TransportConf* release_transport_conf();
  ::senior::dox::proto::TransportConf* mutable_transport_conf();
  void set_allocated_transport_conf(::senior::dox::proto::TransportConf* transport_conf);
  private:
  const ::senior::dox::proto::TransportConf& _internal_transport_conf() const;
  ::senior::dox::proto::TransportConf* _internal_mutable_transport_conf();
  public:
  void unsafe_arena_set_allocated_transport_conf(
      ::senior::dox::proto::TransportConf* transport_conf);
  ::senior::dox::proto::TransportConf* unsafe_arena_release_transport_conf();

  // optional .senior.dox.proto.RunModeConf run_mode_conf = 3;
  bool has_run_mode_conf() const;
  private:
  bool _internal_has_run_mode_conf() const;
  public:
  void clear_run_mode_conf();
  const ::senior::dox::proto::RunModeConf& run_mode_conf() const;
  PROTOBUF_MUST_USE_RESULT ::senior::dox::proto::RunModeConf* release_run_mode_conf();
  ::senior::dox::proto::RunModeConf* mutable_run_mode_conf();
  void set_allocated_run_mode_conf(::senior::dox::proto::RunModeConf* run_mode_conf);
  private:
  const ::senior::dox::proto::RunModeConf& _internal_run_mode_conf() const;
  ::senior::dox::proto::RunModeConf* _internal_mutable_run_mode_conf();
  public:
  void unsafe_arena_set_allocated_run_mode_conf(
      ::senior::dox::proto::RunModeConf* run_mode_conf);
  ::senior::dox::proto::RunModeConf* unsafe_arena_release_run_mode_conf();

  // optional .senior.dox.proto.PerfConf perf_conf = 4;
  bool has_perf_conf() const;
  private:
  bool _internal_has_perf_conf() const;
  public:
  void clear_perf_conf();
  const ::senior::dox::proto::PerfConf& perf_conf() const;
  PROTOBUF_MUST_USE_RESULT ::senior::dox::proto::PerfConf* release_perf_conf();
  ::senior::dox::proto::PerfConf* mutable_perf_conf();
  void set_allocated_perf_conf(::senior::dox::proto::PerfConf* perf_conf);
  private:
  const ::senior::dox::proto::PerfConf& _internal_perf_conf() const;
  ::senior::dox::proto::PerfConf* _internal_mutable_perf_conf();
  public:
  void unsafe_arena_set_allocated_perf_conf(
      ::senior::dox::proto::PerfConf* perf_conf);
  ::senior::dox::proto::PerfConf* unsafe_arena_release_perf_conf();

  // @@protoc_insertion_point(class_scope:senior.dox.proto.CyberConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::senior::dox::proto::SchedulerConf* scheduler_conf_;
  ::senior::dox::proto::TransportConf* transport_conf_;
  ::senior::dox::proto::RunModeConf* run_mode_conf_;
  ::senior::dox::proto::PerfConf* perf_conf_;
  friend struct ::TableStruct_dox_2fproto_2fdox_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CyberConfig

// optional .senior.dox.proto.SchedulerConf scheduler_conf = 1;
inline bool CyberConfig::_internal_has_scheduler_conf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scheduler_conf_ != nullptr);
  return value;
}
inline bool CyberConfig::has_scheduler_conf() const {
  return _internal_has_scheduler_conf();
}
inline const ::senior::dox::proto::SchedulerConf& CyberConfig::_internal_scheduler_conf() const {
  const ::senior::dox::proto::SchedulerConf* p = scheduler_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::senior::dox::proto::SchedulerConf&>(
      ::senior::dox::proto::_SchedulerConf_default_instance_);
}
inline const ::senior::dox::proto::SchedulerConf& CyberConfig::scheduler_conf() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.CyberConfig.scheduler_conf)
  return _internal_scheduler_conf();
}
inline void CyberConfig::unsafe_arena_set_allocated_scheduler_conf(
    ::senior::dox::proto::SchedulerConf* scheduler_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduler_conf_);
  }
  scheduler_conf_ = scheduler_conf;
  if (scheduler_conf) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:senior.dox.proto.CyberConfig.scheduler_conf)
}
inline ::senior::dox::proto::SchedulerConf* CyberConfig::release_scheduler_conf() {
  _has_bits_[0] &= ~0x00000001u;
  ::senior::dox::proto::SchedulerConf* temp = scheduler_conf_;
  scheduler_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::senior::dox::proto::SchedulerConf* CyberConfig::unsafe_arena_release_scheduler_conf() {
  // @@protoc_insertion_point(field_release:senior.dox.proto.CyberConfig.scheduler_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::senior::dox::proto::SchedulerConf* temp = scheduler_conf_;
  scheduler_conf_ = nullptr;
  return temp;
}
inline ::senior::dox::proto::SchedulerConf* CyberConfig::_internal_mutable_scheduler_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (scheduler_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::senior::dox::proto::SchedulerConf>(GetArenaForAllocation());
    scheduler_conf_ = p;
  }
  return scheduler_conf_;
}
inline ::senior::dox::proto::SchedulerConf* CyberConfig::mutable_scheduler_conf() {
  ::senior::dox::proto::SchedulerConf* _msg = _internal_mutable_scheduler_conf();
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.CyberConfig.scheduler_conf)
  return _msg;
}
inline void CyberConfig::set_allocated_scheduler_conf(::senior::dox::proto::SchedulerConf* scheduler_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduler_conf_);
  }
  if (scheduler_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduler_conf));
    if (message_arena != submessage_arena) {
      scheduler_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduler_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scheduler_conf_ = scheduler_conf;
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.CyberConfig.scheduler_conf)
}

// optional .senior.dox.proto.TransportConf transport_conf = 2;
inline bool CyberConfig::_internal_has_transport_conf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || transport_conf_ != nullptr);
  return value;
}
inline bool CyberConfig::has_transport_conf() const {
  return _internal_has_transport_conf();
}
inline const ::senior::dox::proto::TransportConf& CyberConfig::_internal_transport_conf() const {
  const ::senior::dox::proto::TransportConf* p = transport_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::senior::dox::proto::TransportConf&>(
      ::senior::dox::proto::_TransportConf_default_instance_);
}
inline const ::senior::dox::proto::TransportConf& CyberConfig::transport_conf() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.CyberConfig.transport_conf)
  return _internal_transport_conf();
}
inline void CyberConfig::unsafe_arena_set_allocated_transport_conf(
    ::senior::dox::proto::TransportConf* transport_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_conf_);
  }
  transport_conf_ = transport_conf;
  if (transport_conf) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:senior.dox.proto.CyberConfig.transport_conf)
}
inline ::senior::dox::proto::TransportConf* CyberConfig::release_transport_conf() {
  _has_bits_[0] &= ~0x00000002u;
  ::senior::dox::proto::TransportConf* temp = transport_conf_;
  transport_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::senior::dox::proto::TransportConf* CyberConfig::unsafe_arena_release_transport_conf() {
  // @@protoc_insertion_point(field_release:senior.dox.proto.CyberConfig.transport_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::senior::dox::proto::TransportConf* temp = transport_conf_;
  transport_conf_ = nullptr;
  return temp;
}
inline ::senior::dox::proto::TransportConf* CyberConfig::_internal_mutable_transport_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (transport_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::senior::dox::proto::TransportConf>(GetArenaForAllocation());
    transport_conf_ = p;
  }
  return transport_conf_;
}
inline ::senior::dox::proto::TransportConf* CyberConfig::mutable_transport_conf() {
  ::senior::dox::proto::TransportConf* _msg = _internal_mutable_transport_conf();
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.CyberConfig.transport_conf)
  return _msg;
}
inline void CyberConfig::set_allocated_transport_conf(::senior::dox::proto::TransportConf* transport_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_conf_);
  }
  if (transport_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_conf));
    if (message_arena != submessage_arena) {
      transport_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  transport_conf_ = transport_conf;
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.CyberConfig.transport_conf)
}

// optional .senior.dox.proto.RunModeConf run_mode_conf = 3;
inline bool CyberConfig::_internal_has_run_mode_conf() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || run_mode_conf_ != nullptr);
  return value;
}
inline bool CyberConfig::has_run_mode_conf() const {
  return _internal_has_run_mode_conf();
}
inline const ::senior::dox::proto::RunModeConf& CyberConfig::_internal_run_mode_conf() const {
  const ::senior::dox::proto::RunModeConf* p = run_mode_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::senior::dox::proto::RunModeConf&>(
      ::senior::dox::proto::_RunModeConf_default_instance_);
}
inline const ::senior::dox::proto::RunModeConf& CyberConfig::run_mode_conf() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.CyberConfig.run_mode_conf)
  return _internal_run_mode_conf();
}
inline void CyberConfig::unsafe_arena_set_allocated_run_mode_conf(
    ::senior::dox::proto::RunModeConf* run_mode_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_mode_conf_);
  }
  run_mode_conf_ = run_mode_conf;
  if (run_mode_conf) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:senior.dox.proto.CyberConfig.run_mode_conf)
}
inline ::senior::dox::proto::RunModeConf* CyberConfig::release_run_mode_conf() {
  _has_bits_[0] &= ~0x00000004u;
  ::senior::dox::proto::RunModeConf* temp = run_mode_conf_;
  run_mode_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::senior::dox::proto::RunModeConf* CyberConfig::unsafe_arena_release_run_mode_conf() {
  // @@protoc_insertion_point(field_release:senior.dox.proto.CyberConfig.run_mode_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::senior::dox::proto::RunModeConf* temp = run_mode_conf_;
  run_mode_conf_ = nullptr;
  return temp;
}
inline ::senior::dox::proto::RunModeConf* CyberConfig::_internal_mutable_run_mode_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (run_mode_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::senior::dox::proto::RunModeConf>(GetArenaForAllocation());
    run_mode_conf_ = p;
  }
  return run_mode_conf_;
}
inline ::senior::dox::proto::RunModeConf* CyberConfig::mutable_run_mode_conf() {
  ::senior::dox::proto::RunModeConf* _msg = _internal_mutable_run_mode_conf();
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.CyberConfig.run_mode_conf)
  return _msg;
}
inline void CyberConfig::set_allocated_run_mode_conf(::senior::dox::proto::RunModeConf* run_mode_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_mode_conf_);
  }
  if (run_mode_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_mode_conf));
    if (message_arena != submessage_arena) {
      run_mode_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_mode_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  run_mode_conf_ = run_mode_conf;
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.CyberConfig.run_mode_conf)
}

// optional .senior.dox.proto.PerfConf perf_conf = 4;
inline bool CyberConfig::_internal_has_perf_conf() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || perf_conf_ != nullptr);
  return value;
}
inline bool CyberConfig::has_perf_conf() const {
  return _internal_has_perf_conf();
}
inline const ::senior::dox::proto::PerfConf& CyberConfig::_internal_perf_conf() const {
  const ::senior::dox::proto::PerfConf* p = perf_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::senior::dox::proto::PerfConf&>(
      ::senior::dox::proto::_PerfConf_default_instance_);
}
inline const ::senior::dox::proto::PerfConf& CyberConfig::perf_conf() const {
  // @@protoc_insertion_point(field_get:senior.dox.proto.CyberConfig.perf_conf)
  return _internal_perf_conf();
}
inline void CyberConfig::unsafe_arena_set_allocated_perf_conf(
    ::senior::dox::proto::PerfConf* perf_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_conf_);
  }
  perf_conf_ = perf_conf;
  if (perf_conf) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:senior.dox.proto.CyberConfig.perf_conf)
}
inline ::senior::dox::proto::PerfConf* CyberConfig::release_perf_conf() {
  _has_bits_[0] &= ~0x00000008u;
  ::senior::dox::proto::PerfConf* temp = perf_conf_;
  perf_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::senior::dox::proto::PerfConf* CyberConfig::unsafe_arena_release_perf_conf() {
  // @@protoc_insertion_point(field_release:senior.dox.proto.CyberConfig.perf_conf)
  _has_bits_[0] &= ~0x00000008u;
  ::senior::dox::proto::PerfConf* temp = perf_conf_;
  perf_conf_ = nullptr;
  return temp;
}
inline ::senior::dox::proto::PerfConf* CyberConfig::_internal_mutable_perf_conf() {
  _has_bits_[0] |= 0x00000008u;
  if (perf_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::senior::dox::proto::PerfConf>(GetArenaForAllocation());
    perf_conf_ = p;
  }
  return perf_conf_;
}
inline ::senior::dox::proto::PerfConf* CyberConfig::mutable_perf_conf() {
  ::senior::dox::proto::PerfConf* _msg = _internal_mutable_perf_conf();
  // @@protoc_insertion_point(field_mutable:senior.dox.proto.CyberConfig.perf_conf)
  return _msg;
}
inline void CyberConfig::set_allocated_perf_conf(::senior::dox::proto::PerfConf* perf_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_conf_);
  }
  if (perf_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_conf));
    if (message_arena != submessage_arena) {
      perf_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  perf_conf_ = perf_conf;
  // @@protoc_insertion_point(field_set_allocated:senior.dox.proto.CyberConfig.perf_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dox
}  // namespace senior

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dox_2fproto_2fdox_5fconf_2eproto
